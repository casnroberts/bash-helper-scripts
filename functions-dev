#!/bin/bash

############
# WEBRH HELPER FUNCTIONS
# General: repositories must live in the same parent folder
#
# dependencies:
#  --  USER variable; from bash_profile
#		a string containing the user name
#  --  REPOS array; from bash_profile
#		an array of valid project repositories
#  --  REPO_HOME variable; from bash_profile
#		the path where all the repos exist together
# --  sandbox function required; from bash_profile
#      returns sandbox path
############

for r in "${REPOS[@]}"; do
    alias ${r}="cd ${REPO_HOME}/${r}"
done

function getIndex {
	search=$1; shift
	array=( $* )
	len=$(expr ${#array[@]})
	i=$( echo ${array[@]/$search//} | cut -d/ -f1 | wc -w | tr -d ' ' )
	[ $i -lt $len ] && echo $i || echo -1
}

function sshsandbox {
    cmd="ssh $(sandbox ${1:-$USER})"
    eval $cmd
}

# Run grunt watcher in the background
function bgwatch {
    grunt watcher &>/dev/null &
    return $!
}

function getRepo {
	this=
	for repo in ${REPOS[@]}; do
		test=$(pwd | grep ${repo})
	    [ $? -eq 0 ] && this="${repo}"
	done

    # if neither repo
    [ -z "$this" ] && echo "You are not in a valid repository." && return 1

    echo "$this" && return 0
}

function topofrepo {
	oldIFS=$IFS
    repo=$(getRepo)
    [ $? -gt 0 ] && echo "Must be in a valid project repository." && return
	# Check full path and move to root of repository
	path="$(pwd)"
	path=${path#\/}
	IFS='/' declare -a 'arr=( ${path%\/} )'
	i=$( getIndex $repo ${arr[@]} )
	root=
	[[ $i -lt ${#arr[@]} ]] && root=$(IFS='/'; shift; echo "/${arr[*]:0:$i+1}") && cd $root
	IFS=$oldIFS
}